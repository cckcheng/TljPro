package com.ccd.tljpro;

import com.codename1.components.SpanLabel;
import com.codename1.components.ToastBar;
import com.codename1.io.Log;
import com.codename1.io.Preferences;
import com.codename1.io.Socket;
import com.codename1.io.Storage;
import com.codename1.l10n.L10NManager;
import com.codename1.social.AppleLogin;
import com.codename1.social.GoogleConnect;
import com.codename1.social.LoginCallback;
import com.codename1.ui.Button;
import com.codename1.ui.ButtonGroup;
import static com.codename1.ui.CN.*;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Dialog;
import com.codename1.ui.Display;
import com.codename1.ui.Font;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.RadioButton;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.Toolbar;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.layouts.Layout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import com.codename1.util.StringUtil;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class TuoLaJiPro {

    static public final boolean DEBUG = false;
    static public final boolean BYPASS_LOGIN = false;
    static public final boolean INTERNAL = true;

//    static public final String STORAGE_PROFILE = "profile";
    static public final int GREEN = 0x008000;
//    static public final int DARK_GREEN = 0x0a300a;
    static public final int DARK_GREEN = 0x3c8535;
//    static public final int LIGHT_GREEN = 0x39ad39;
    static public final int LIGHT_GREEN = 0x498057;
    static public final int DARK_BLUE = 0x374b6b;
    static public final int LIGHT_BLUE = 0x54698c;

    static final Map<String, CustomColor> AvailableColors = new HashMap<>();
    static final List<ButtonText> SideMenus = new ArrayList<>();

    static {
        AvailableColors.put("GREEN", new CustomColor("Green", "绿色", GREEN));
        AvailableColors.put("LT_GREEN", new CustomColor("Light Green", "浅绿", LIGHT_GREEN));
        AvailableColors.put("DK_GREEN", new CustomColor("Dark Green", "深绿", DARK_GREEN));
        AvailableColors.put("LT_BLUE", new CustomColor("Light Blue", "浅蓝", LIGHT_BLUE));
        AvailableColors.put("DK_BLUE", new CustomColor("Dark Blue", "深蓝", DARK_BLUE));
    }

    static public int BACKGROUND_COLOR = DARK_BLUE;

    public CustomColor currentColor;
    private Form current;
    public Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public Form formMain = null;
    public TableView formView = null;
    public Form formTable = null;
    public Form formHelp = null;
    public Form formTutor = null;
    public Form formSetting = null;
    public Tour formTour = null;

//    private Label lbTitle;
    private Button btnTutor = null;
    private Button btnPlay = null;
    private Button btnBrowse = null;
    private Button btnPrivateTable = null;
    private Button btnHelp = null;
    private Button btnSetting = null;

    public String getMyId() {
        return myId;
    }

    public String getMyName() {
        return myName;
    }

    public void enableButtons() {
        if (this.btnPlay != null) {
            this.btnPlay.setEnabled(true);
            this.btnPlay.setText(Dict.get(lang, "Play"));
//            this.formMain.revalidate();
            if (TuoLaJiPro.DEBUG) Log.p("Enable play button");
        }
        this.tryTimes = 0;
    }

    public void disableButtons() {
        if (this.btnPlay != null) {
            this.btnPlay.setEnabled(false);
            this.btnPlay.setText(Dict.get(lang, "Connecting") + "...");
        }
    }

    public void showPlayButton() {
        if (this.entry.getComponentIndex(this.btnPlay) < 0) {
            this.entry.addComponent(this.entry.getComponentIndex(this.btnHelp), this.btnPlay);
        }
    }

    public void refreshButtons() {
//        this.lbTitle.setText(Dict.get(lang, title));
        this.formMain.setTitle(Dict.get(lang, title));

        if (this.btnPlay.isEnabled()) {
            this.btnPlay.setText(Dict.get(lang, "Play"));
        }
        this.btnBrowse.setText(Dict.get(lang, "Browse"));
        this.btnPrivateTable.setText(Dict.get(lang, Dict.PRIVATE_TABLE));
        this.btnHelp.setText(Dict.get(lang, "Help"));
        this.btnTutor.setText(Dict.get(lang, "Tutorial"));
        this.btnSetting.setText(Dict.get(lang, "Settings"));
        if (this.player != null) {
            this.player.refreshLang();
        }
        for (ButtonText b : SideMenus) {
            b.refresh();
        }
    }

    public void validateTable() {
        this.table.forceRevalidate();
//        this.table.animateHierarchyAndWait(200);
    }

    public Form getCurForm() {
        return this.isMainForm ? this.formMain : this.formTable;
    }

    static final String DEFAULT_PLAYER_NAME = "NewPlayer";
    private Player player = null;
    private String myId = "TljProNoID";
    private String myName = DEFAULT_PLAYER_NAME;
    private int tryTimes = 0;
    static final int MAX_TRY_TIMES = 3;

    public void onConnectionError() {
        Player p = this.player;
        if (this.btnPlay != null) {
            this.btnPlay.setEnabled(false);
            this.btnPlay.setText(Dict.get(lang, "Network Error"));
            if (++tryTimes >= MAX_TRY_TIMES) {
                return;
            }
            Button btn = this.btnPlay;
            if (this.currentComp == this.entry) {
                new UITimer(new Runnable() {
                    @Override
                    public void run() {
                        btn.setText(Dict.get(lang, "Connecting") + "...");
                        p.connectServer("");
                    }
                }).schedule(3000, false, this.formMain);
            }
        }
    }

    public String version = "1.0";
    public final static String title = "Langley TuoLaJi";
    public String OS = "";

    public String lang = "en";
    public boolean vibrate = true;
    private Container entry;
    private Container table;
    private Container help;
    private Tutor tutor;

    private String errMsg = "";

    private Map<Integer, String> colorIdx = new HashMap<>();
    private String currentColorKey;

    public Image back;

    public void setNoSleep(boolean noSleep) {
        Display disp = Display.getInstance();
        disp.setNoSleep(noSleep);
        disp.setScreenSaverEnabled(!noSleep);
    }

    public void start() {
        Display disp = Display.getInstance();
        disp.requestFullScreen();
        disp.setBuiltinSoundsEnabled(true);
        if (current != null) {
            current.show();
            if (current == this.formTable) {
                disp.setNoSleep(true);
                disp.setScreenSaverEnabled(false);
            } else {
                disp.setNoSleep(false);
                disp.setScreenSaverEnabled(true);
                if (player != null) player.connectServer("");
            }
            return;
        }

//        Preferences.setPreferencesLocation(STORAGE_PROFILE);
        if (BYPASS_LOGIN) {
            Preferences.set("registered", false);
            Preferences.set("UserID", "TestUserID");
            Preferences.set("Email", "TestEmail");
        }

        Object sObj = Storage.getInstance().readObject("lang");
        if (sObj != null) {
            this.lang = sObj.toString();
        } else {
            L10NManager l10n = disp.getLocalizationManager();
            this.lang = l10n.getLanguage();
        }
        if (this.lang == null || this.lang.trim().isEmpty()) this.lang = "en";

        this.vibrate = Preferences.get("vibrate", true);

//        if (DEBUG) this.lang = "en";  // only for testing
        sObj = Storage.getInstance().readObject("myColor");
        if (sObj != null) {
            this.currentColorKey = sObj.toString();
            this.currentColor = AvailableColors.get(this.currentColorKey);
        }

        if (this.currentColor == null) {
            this.currentColorKey = Card.FOR_IOS ? "LT_BLUE" : "DK_BLUE";
            this.currentColor = AvailableColors.get(this.currentColorKey);
        }
        BACKGROUND_COLOR = this.currentColor.backColor;

        back = theme.getImage("btn.png");
//        back = back.scaledHeight(Hand.fontRank.getHeight());
//        String onlineHelp = getHelp();
        this.version = disp.getProperty("AppVersion", this.version);

        if (DEBUG) {
            System.out.println("getHostOrIP=" + Socket.getHostOrIP());

            System.out.println("Platform=" + disp.getProperty("Platform", ""));
            System.out.println("User-Agent=" + disp.getProperty("User-Agent", ""));
            this.OS = disp.getProperty("OS", "");
            System.out.println("OS=" + this.OS);
        }

        String playerId = getPlayerID();
        if (playerId == null) {
            Dialog.show(Dict.get(lang, "Error"), "Failed to generate Player ID", Dict.get(lang, "OK"), "");
            disp.exitApplication();
        }
        this.myId = playerId;

        SideMenus.add(new ButtonText("guide", "Guide", "指南", FontImage.MATERIAL_LIST_ALT));
        SideMenus.add(new ButtonText("account", "Account", "账户", FontImage.MATERIAL_ACCOUNT_CIRCLE));
        SideMenus.add(new ButtonText("rank", "Ranking", "排行耪", FontImage.MATERIAL_STAR));
        SideMenus.add(new ButtonText("recommend", "Refer Friends", "推荐朋友", FontImage.MATERIAL_PEOPLE_OUTLINE));

        if (!INTERNAL) {
            startup();
        } else {
            selectHost();
            SideMenus.add(new ButtonText("tour", "Tours", "比赛", FontImage.MATERIAL_PEOPLE_OUTLINE));
        }
    }

    protected Form formHost;

    private void selectHost() {
        formHost = new Form("Select Host", BoxLayout.y());

        CheckBox cbTest = new CheckBox("Test");
        TextField tf1 = new TextField(Card.TLJ_DOMAIN, 8);
        TextField tf2 = new TextField(Card.TLJ_IP, 8);

        Button btn1 = new Button("Go");
        btn1.addActionListener(ev -> {
            String host = tf1.getText().trim();
            if (host.isEmpty()) return;
            Card.TLJ_HOST = Card.TLJ_HOST_IP = host;
            Card.TLJ_PORT = cbTest.isSelected()
                    ? (Card.FOR_IOS ? Card.PORT_IOS_TEST : Card.PORT_ANDROID_TEST)
                    : (Card.FOR_IOS ? Card.PORT_IOS : Card.PORT_ANDROID);
            startup();
        });
        Button btn2 = new Button("Go");
        btn2.addActionListener(ev -> {
            String host = tf2.getText().trim();
            if (host.isEmpty()) return;
            Card.TLJ_HOST = Card.TLJ_HOST_IP = host;
            Card.TLJ_PORT = cbTest.isSelected()
                    ? (Card.FOR_IOS ? Card.PORT_IOS_TEST : Card.PORT_ANDROID_TEST)
                    : (Card.FOR_IOS ? Card.PORT_IOS : Card.PORT_ANDROID);
            startup();
        });
        formHost.add(BoxLayout.encloseXCenter(cbTest));
        formHost.add(BoxLayout.encloseX(tf1, btn1));
        formHost.add(BoxLayout.encloseX(tf2, btn2));

        formHost.show();
    }

    private void startup() {
        if (formStart == null) {
            formStart = new Form();
            formStart.getToolbar().hideToolbar();
        }

        if (this.player != null) {
            this.player.disconnect();
        }
        this.player = new Player(this);

        this.player.connectServer(true);

        startupShow();
    }

    static final int bigJoker = 0x1F0CF;
    Form formStart;

    private int orientation = 0; // landscape=1, portrait=2

    private void updateLayerLayout(Container center, LayeredLayout ll, int cw, int ch, int total) {
        int w = getDisplayWidth();
        int h = getDisplayHeight();
        int curOrienation = w > h ? 1 : 2;
        if (orientation == curOrienation) return;
        orientation = curOrienation;
        int sw = w < h ? w : h;
        int cx = w / 2;
        int cy = h / 2;
        int r = sw * 2 / 5;
        int deg = 360 / total;
        int dx, dy;
//        int dr = 40;

        Component c;
        for (int i = 0; i < total; i++) {
            c = center.getComponentAt(i);
            double rad = deg * i * Math.PI / 180;
//            dx = 50 - (int) (Math.sin(rad) * dr);
//            dy = 50 - (int) (Math.cos(rad) * dr);
            dx = cx - cw / 2 - (int) (Math.sin(rad) * r);
            dy = cy - ch / 2 - (int) (Math.cos(rad) * r);
//            String inset = dy + "% " + dx + "% auto auto";
            String inset = dy + " " + dx + " auto auto";
            ll.setInsets(c, inset);
//            center.add(BoxLayout.encloseXCenter(new Label(redJoker)));
        }
    }

    int idxLayout = 0;
    private Form prevForm;
    public void startupShow() {
        if (this.orientation > 0) {
            prevForm = getCurrentForm();
            formStart.show();
            return;
        }

        BorderLayout border = new BorderLayout();
        border.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_SCALE);
//        border.setCenterBehavior(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE);
        formStart.setLayout(border);

        int w = getDisplayWidth();
        int h = getDisplayHeight();
        int sw = w < h ? w : h;
        int cw = sw / 7;
        int ch = (int) (cw * 1.618);
        Font materialFont = FontImage.getMaterialDesignFont();
//        FontImage redJoker = FontImage.createFixed(new String(Character.toChars(bigJoker)), materialFont, Hand.redColor, cw, ch);
        FontImage redJoker = FontImage.createFixed(new String(Character.toChars(bigJoker)), materialFont, Hand.redColor, 100, 200);
//        FontImage redJoker = FontImage.createFixed("🃏", materialFont, Hand.redColor, cw, ch);

        LayeredLayout ll0 = new LayeredLayout();
        Container center = new Container(ll0);

        Random rnd = new Random();
        boolean even = rnd.nextInt(2) > 0;
        int total = even ? 12 : 9;
//        center.setShouldCalcPreferredSize(true);

        if (Card.FOR_IOS) {
            cw = cw * 3 / 2;
            ch = ch * 3 / 2;
        }
        Image img = redJoker.scaled(cw, ch);
        Component c;
        for (int i = 0; i < total; i++) {
//            c = new Label(img);
            c = BoxLayout.encloseXCenter(new Label(img));
//            c.setUIID("Container");
            center.add(c);
            ll0.setInsets(c, "50% 50%");
        }

        formStart.addComponent(BorderLayout.CENTER, center);
        formStart.show();
//        formStart.setTransitionOutAnimator(CommonTransitions.createCover(CommonTransitions.SLIDE_VERTICAL, true, 800));
        formStart.setTransitionOutAnimator(CommonTransitions.createSlide(CommonTransitions.SLIDE_HORIZONTAL, true, 1000));

        LayeredLayout ll = new LayeredLayout();
        updateLayerLayout(center, ll, cw, ch, total);
        List<Layout> layouts = new ArrayList<>();
        layouts.add(ll);
        if (total == 12) {
            layouts.add(new GridLayout(3, 4));
        } else {
            layouts.add(new GridLayout(3, 3));
        }
//        layouts.add(ll);
        if (total == 12) {
            layouts.add(new GridLayout(2, 6));
        } else {
            layouts.add(new GridLayout(1, 9));
        }
//        layouts.add(ll);

        if (total == 12) {
            layouts.add(new GridLayout(4, 3));
            layouts.add(new GridLayout(4, 6));
        } else {
            layouts.add(new GridLayout(3, 3));
        }
        if (total == 12) {
            layouts.add(new GridLayout(6, 2));
        } else {
            layouts.add(new GridLayout(9, 1));
        }
        layouts.add(ll);
        if (total == 12) {
            layouts.add(new GridLayout(3, 6));
        } else {
            layouts.add(new GridLayout(2, 9));
        }
        layouts.add(BoxLayout.xCenter());
        layouts.add(BoxLayout.yCenter());

        final int n = layouts.size();
        int x = rnd.nextInt(n);
        center.setLayout(layouts.get(x));
        formStart.getContentPane().animateHierarchy(3000);
        idxLayout = x;

        final int cw0 = cw, ch0 = ch;
        UITimer timer = new UITimer(() -> {
            updateLayerLayout(center, ll, cw0, ch0, total);
            rnd.setSeed(System.currentTimeMillis() + idxLayout);
            int nIdx = rnd.nextInt(n);
            if (layouts.get(nIdx) == layouts.get(idxLayout)) {
                idxLayout = nIdx + 1;
            } else {
                idxLayout = nIdx;
            }
            if (idxLayout >= n) idxLayout = idxLayout % n;
            Layout layout = layouts.get(idxLayout);
            center.setLayout(layout);

//            center.animateLayoutAndWait(3000);
            formStart.getContentPane().animateHierarchy(3000);
            if (formMain == null) {
                ToastBar.showErrorMessage(Dict.get(lang, "Connecting") + "...", 1500);
            }
        });
        timer.schedule(3500, true, formStart);

        formStart.addPointerPressedListener((ev) -> {
            exitShow();
        });
        formStart.setBackCommand("", null, (ev) -> {
            exitShow();
        });
    }

    private void exitShow() {
        if (formMain != null) {
            if (prevForm != null) {
                prevForm.showBack();
                current = prevForm;
            } else {
                formMain.showBack();
                current = formMain;
            }
        } else if (INTERNAL) {
            if (this.player != null) this.player.disconnect();
            formHost.showBack();
        }
    }

    public void showLogin() {
        registered = Preferences.get("registered", false);
        String globalId = Preferences.get("UserID", "");
        Display.getInstance().callSerially(() -> {
            if (registered && globalId.isEmpty()) {
                startMain();
            } else {
                if (Card.FOR_IOS) {
                    AppleLogin login = new AppleLogin();
                    if (BYPASS_LOGIN || login.isUserLoggedIn()) {
                        startMain();
                    } else {
                        showAppleLogin(login);
                    }
                } else {
//                    showGoogleLogin();
                    startMain();
                }
            }
        });
    }

    protected boolean registered = false;
    private boolean setupDone = false;

    private boolean doRegistration() {
        if (registered || skipRegistration) return false;
        registered = Preferences.get("registered", false);
        if (registered) return false;

        String globalId = Preferences.get("UserID", "");
        if (globalId.isEmpty()) {
            this.startRegistration();
        } else {
            String uName = Preferences.get("Name", this.myName).trim();
            if (!uName.isEmpty()) this.myName = uName;
            player.sendRequest(player.initRequest(Request.REGISTER)
                    .append("gid", globalId)
                    .append("email", Preferences.get("Email", ""))
                    .append("keyid", Preferences.get("KeyID", ""))
                    .setReSend(true));
        }
        return true;
    }

    public void finishRegistration() {
        Preferences.set("registered", true);
        registered = true;
        boolean setupAlready = this.setupDone;
        startMain();
        if (setupAlready) ServerMessage.showMessage(this, "guide");
    }

    private boolean initSetup() {
        if (setupDone) return false;
        setupDone = Preferences.get("setup", false);
        if (setupDone) return false;

        Display.getInstance().callSerially(() -> {
            showSettings();
        });
        return true;
    }

    private boolean firstIn = false;
    private void startMain() {
        if (this.doRegistration()) {
            firstIn = true;
            return;
        }
        if (this.initSetup()) {
            firstIn = true;
            return;
        }

        Display.getInstance().callSerially(() -> {
            if (this.formMain != null) {
                switchScene("entry");
                return;
            }
            this.createMainForm();

            String playerName = getPlayerName();
            if (playerName.isEmpty()) {
//                this.inputPlayName(playerName);
            } else {
                this.myName = playerName;
            }

//            int h = CommonTransitions.SLIDE_HORIZONTAL;
//            formMain.setTransitionOutAnimator(CommonTransitions.createSlide(h, true, 1500));
//            formStart.setTransitionOutAnimator(CommonTransitions.createSlide(h, true, 1000));
            this.formMain.showBack();
            this.setupTable();

            this.formView = new TableView(this);
//            this.formView.getStyle().setBgColor(BACKGROUND_COLOR);
            this.formView.init();

            if (!firstIn) {
//                this.player.connectServer(Player.OPTION_CHECK);
                this.player.initCheckin(Player.OPTION_CHECK);
            }

            this.entry.setLayout(BoxLayout.yCenter());
            this.entry.animateLayoutAndWait(2000);
            Display.getInstance().lockOrientation(false);

            if (this.player.coins > 0) {
                updateAccountInfo(this.player.coins);
            }
        });
    }

    public void infoRegisterRequired() {
        Dialog dlg = new Dialog(Dict.get(lang, Dict.REGISTER_REQUIRED));
        dlg.add(new Button(Command.create(Dict.get(lang, Dict.REGISTER), null,
                (ev) -> {
                    skipRegistration = false;
                    showLogin();
                }))
        );
        dlg.add(new Button(Command.create(Dict.get(lang, "Cancel"), null,
                (ev) -> {
                }))
        );
        dlg.setBackCommand("", null, (ev) -> {
        });
        dlg.show();
    }

    private Label lblStat;
    private Label lblAccount;

    private void createMainForm() {
        if (this.formMain == null) {
            Form mainForm = new Form(Dict.get(lang, title), new BorderLayout());
            mainForm.setSafeArea(true);
            if (DEBUG) {
                Rectangle safeRect = mainForm.getSafeArea();
                System.out.print(" x=" + safeRect.getX());
                System.out.print(" y=" + safeRect.getY());
                System.out.print(" w=" + safeRect.getWidth());
                System.out.print(" h=" + safeRect.getHeight());
            }
            this.formMain = mainForm;
            mainForm.getAllStyles().setBgColor(BACKGROUND_COLOR);

            Toolbar topTool = mainForm.getToolbar();
            topTool.setUIID("myTool");

            int menuColor = Player.BUTTON_COLOR;
            Button bPlay = new Button(Dict.get(lang, "Connecting") + "...");
            bPlay.getStyle().setFgColor(menuColor);
            bPlay.getAllStyles().setFont(Hand.fontRank);
            if (this.player.isConnected()) {
                bPlay.setText(Dict.get(lang, "Play"));
            } else {
                bPlay.setEnabled(false);
            }
            this.btnPlay = bPlay;

            bPlay.setMaterialIcon( FontImage.MATERIAL_PEOPLE);
            bPlay.addActionListener((e) -> {
                if (!isLandscape()) {
                    return;
                }
                this.switchScene("view");
                if (registered) {
                    player.sendRequest(new Request(Request.RESUME, true).setReSend(true));
                }
            });

            btnBrowse = new Button(Dict.get(lang, "Browse"));
            btnBrowse.getStyle().setFgColor(menuColor);
            btnBrowse.getAllStyles().setFont(Hand.fontRank);
            btnBrowse.setMaterialIcon( FontImage.MATERIAL_VIEW_MODULE);
            btnBrowse.addActionListener((e) -> {
                if (!isLandscape()) {
                    return;
                }
                this.switchScene("view");
            });

            btnPrivateTable = new Button(Dict.get(lang, Dict.PRIVATE_TABLE));
            btnPrivateTable.getStyle().setFgColor(menuColor);
            btnPrivateTable.getAllStyles().setFont(Hand.fontRank);
            btnPrivateTable.setMaterialIcon( FontImage.MATERIAL_LOCK);
            btnPrivateTable.addActionListener((e) -> {
                if (!isLandscape()) {
                    return;
                }

                if (registered) {
                    this.formView.inputPassword(this.player);
                } else {
                    infoRegisterRequired();
                }
            });

            btnHelp = new Button(Dict.get(lang, "Help"));
            btnHelp.getStyle().setFgColor(menuColor);
//            btnHelp.getAllStyles().setFont(Hand.fontRank);
            btnHelp.setMaterialIcon( FontImage.MATERIAL_HELP);
            btnHelp.addActionListener((e) -> {
                if (!isLandscape()) {
                    return;
                }
                showHelp(lang);
            });

            btnTutor = new Button(Dict.get(lang, "Tutorial"));
            btnTutor.getStyle().setFgColor(menuColor);
            btnTutor.getAllStyles().setFont(Hand.fontRank);
            btnTutor.setMaterialIcon( FontImage.MATERIAL_TOUCH_APP);
            btnTutor.addActionListener((e) -> {
                if (!isLandscape()) {
                    return;
                }
                this.switchScene("tutor");
            });

            btnSetting = new Button(Dict.get(lang, "Settings"));
            btnSetting.getStyle().setFgColor(menuColor);
//            btnSetting.getAllStyles().setFont(Hand.fontRank);
            btnSetting.setMaterialIcon(FontImage.MATERIAL_SETTINGS);
            btnSetting.addActionListener((e) -> {
                showSettings();
            });

            this.entry = new Container(new LayeredLayout());
            this.entry.setSafeArea(true);

            entry.add(this.btnTutor);
            entry.add(this.btnBrowse);
            entry.add(this.btnPlay);
            entry.add(this.btnPrivateTable);

            mainForm.add(BorderLayout.CENTER, entry);
            this.currentComp = entry;

            Toolbar statusBar = new Toolbar(true);
            statusBar.setUIID("user_status");
            this.lblAccount = new Label("");
            this.lblAccount.getStyle().setFgColor(this.currentColor.generalColor);
            this.lblAccount.getAllStyles().setFont(Hand.fontGeneral);
            this.lblStat = new Label("");
            this.lblStat.getStyle().setFgColor(this.currentColor.generalColor);
            this.lblStat.getAllStyles().setFont(Hand.fontGeneral);
            statusBar.add(EAST, this.lblStat);
            statusBar.add(WEST, this.lblAccount);
            mainForm.add(BorderLayout.SOUTH, statusBar);

            topTool.addComponentToRightSideMenu(btnHelp);
            topTool.addComponentToRightSideMenu(btnSetting);
            for (ButtonText b : SideMenus) {
                topTool.addComponentToRightSideMenu(b.getButton(this));
            }
            if (INTERNAL) {
                topTool.addMaterialCommandToRightBar("Storage", FontImage.MATERIAL_ECO, (ev) -> {
                    showStorage();
                });
            }

            Button rightMenu = topTool.getRightSideMenuButton();
            rightMenu.setText(Dict.get(lang, "Tools"));
        }
    }

    public void updateAccountInfo(int coins) {
        this.lblAccount.setText(this.myName + ": " + Card.suiteSign(Card.DIAMOND) + coins);
        this.lblAccount.getParent().animateLayout(500);
    }

    public void updateStatInfo(String stat) {
        this.lblStat.setText(stat);
        this.lblStat.getParent().animateLayout(500);
    }

    private void setupTable() {
        this.table = new Container(new LayeredLayout());
        this.table.setSafeArea(true);
        this.player.createTable(this.table);

        this.formTable = new Form("Table", new BorderLayout());
        this.formTable.getStyle().setBgColor(BACKGROUND_COLOR);
        this.formTable.getToolbar().hideToolbar();
        this.formTable.add(BorderLayout.CENTER, this.table);
        this.formTable.revalidate();
//        this.formTable.animateHierarchy(500);
    }

    private void inputPlayName(String name) {
        final TextField pName = new TextField(name, Dict.get(lang, "Your Name"), 8, TextArea.ANY);
        pName.setMaxSize(16);
        Command okCmd = new Command(Dict.get(lang, "OK")) {
            @Override
            public void actionPerformed(ActionEvent ev) {
                String playerName = savePlayerName(pName);
                if (playerName == null || playerName.isEmpty()) {
                    Display.getInstance().exitApplication();
                }
                Display.getInstance().callSerially(() -> {
                    switchScene("entry");
                });
            }
        };
        Dialog dlg = new Dialog(Dict.get(lang, "Player Name"));
        dlg.add(pName).add(new Button(okCmd));
        dlg.show();
    }

    void showPlayOption() {
        Object sgObj = Storage.getInstance().readObject("playerName");
        final TextField pName = new TextField("", Dict.get(lang, "Your Name")
                + "(" + Dict.get(lang, Dict.PNAME) + ")", 16, TextArea.ANY);
        pName.setMaxSize(16);
        if (sgObj != null) {
            pName.setText(sgObj.toString());
        }
        Command practiceCmd = new Command(Dict.get(lang, "Practice")) {
            @Override
            public void actionPerformed(ActionEvent ev) {
                String playerName = savePlayerName(pName);
                if (playerName == null) {
                    btnPlay.setEnabled(true);
                    return;
                }
                btnPlay.setEnabled(false);
                player.startPlay(Player.OPTION_PRACTICE);
            }
        };
        FontImage.setMaterialIcon(practiceCmd, FontImage.MATERIAL_DIRECTIONS_WALK, "Button");
        Command matchCmd = new Command(Dict.get(lang, "Match")) {
            @Override
            public void actionPerformed(ActionEvent ev) {
                String playerName = savePlayerName(pName);
                if (playerName == null) {
                    btnPlay.setEnabled(true);
                    return;
                }
                btnPlay.setEnabled(false);
                player.startPlay();
            }
        };
        FontImage.setMaterialIcon(matchCmd, FontImage.MATERIAL_DIRECTIONS_RUN, "Button");
        int finPrac = Func.parseInteger(Storage.getInstance().readObject("finprac"));
        if (finPrac < 1) {
            int totalScore = Func.parseInteger(Storage.getInstance().readObject("tutor_score"));
            if (totalScore >= 80) {
                finPrac = 1;
                Storage.getInstance().writeObject("finprac", 1);
            }
        }
        matchCmd.setEnabled(finPrac > 0);

        Dialog.show("", pName, practiceCmd, matchCmd);
    }

    public Player getPlayer() {
        return player;
    }

    private String savePlayerName(TextField pName) {
        String playerName = pName.getText().trim();
        if (playerName.isEmpty()) {
            this.errMsg = Dict.get(lang, Dict.PLAYER_NAME_REQUIRED);
            return null;
        }
        pName.stopEditing();
        playerName = StringUtil.replaceAll(playerName, "\"", "");
        playerName = StringUtil.replaceAll(playerName, "\\", "");
        playerName = StringUtil.replaceAll(playerName, "'", "");
        playerName = StringUtil.replaceAll(playerName, ":", " ");
        if (playerName.trim().isEmpty()) {
            this.errMsg = Dict.get(lang, Dict.INVALID_PLAYER_NAME);
            return null;
        }
        pName.setText(playerName);
        if (playerName.equals(this.myName)) return playerName;

        Storage.getInstance().writeObject("playerName", playerName);
        this.myName = playerName;
        if (setupDone) player.sendRequest(this.player.initRequest(Request.LIST));
        return playerName;
    }

    private void saveBackground(Picker strPicker) {
        int idx = strPicker.getSelectedStringIndex();
        if (this.colorIdx.get(idx).equals(this.currentColorKey)) {
            return;
        }
        this.currentColorKey = this.colorIdx.get(idx);
        Storage.getInstance().writeObject("myColor", this.currentColorKey);
//        restartApp();
        this.currentColor = AvailableColors.get(this.currentColorKey);
        BACKGROUND_COLOR = this.currentColor.backColor;

        if (!setupDone) return;

        this.formMain.getStyle().setBgColor(BACKGROUND_COLOR);
        this.formTable.getStyle().setBgColor(BACKGROUND_COLOR);
        if (this.formTutor != null) this.formTutor.getStyle().setBgColor(BACKGROUND_COLOR);

        this.lblAccount.getStyle().setFgColor(this.currentColor.generalColor);
        this.lblStat.getStyle().setFgColor(this.currentColor.generalColor);
        refreshButtons();
    }

    private Component currentComp;
    public boolean isMainForm = true;

    public void switchScene(final String scene) {
        isMainForm = false;
        final TuoLaJiPro app = this;
        switch (scene) {
            case "entry":
                app.formMain.show();
                isMainForm = true;
                app.formMain.setGlassPane(null);
                break;
            case "view":
                app.formView.show();
                app.formView.pullTableList();
                break;

            case "table":
                app.formTable.show();
//                app.formTable.repaint();
                break;
            case "help":
                app.formHelp.show();
                break;
            case "tutor":
                if (app.formTutor == null) {
                    app.formTutor = new Form("Tutor", new BorderLayout());
                    app.formTutor.setBackCommand("", null, (e) -> {
                        app.switchScene("entry");
                    });
                    app.formTutor.getStyle().setBgColor(BACKGROUND_COLOR);
                    app.formTutor.getToolbar().hideToolbar();
                    app.tutor = new Tutor(app);
                    app.formTutor.addComponent(BorderLayout.CENTER, app.tutor);
                }
                app.tutor.showTopic();
                app.formTutor.show();
                break;

            case "tour":
                if (app.formTour == null) {
                    app.formTour = new Tour(app, "Tour", new BorderLayout());
                    app.formTour.setBackCommand("", null, (e) -> {
                        app.switchScene("entry");
                    });
                    app.formTour.init();
                }
                app.formTour.show();
                break;
            default:
                break;
        }
    }

    private void showSettings() {
        if (this.formSetting == null) {
            this.formSetting = new Form(Dict.get(lang, "Settings")
                    + " (" + Dict.get(lang, "Version") + " " + this.version + ")");
            this.formSetting.setSafeArea(true);
            TextField pName = new TextField("", Dict.get(lang, "Your Name"), 16, TextArea.ANY);
            pName.setMaxSize(16);
            pName.setText(this.myName.equals(DEFAULT_PLAYER_NAME) ? "" : this.myName);
            TableLayout tl = new TableLayout(2, 2);
            this.formSetting.setLayout(tl);

            String[] bkColors = new String[AvailableColors.keySet().size()];
            int idx = 0;
            for (String k : AvailableColors.keySet()) {
                CustomColor c = AvailableColors.get(k);
                this.colorIdx.put(idx, k);
                bkColors[idx++] = c.getName(lang);
            }

            Picker strPicker = new Picker();
            strPicker.setType(Display.PICKER_TYPE_STRINGS);
            strPicker.setStrings(bkColors);
            strPicker.setSelectedString(this.currentColor.getName(lang));

            RadioButton rbEn = new RadioButton("English");
            RadioButton rbZh = new RadioButton("中文");
            ButtonGroup btnGroup = new ButtonGroup(rbEn, rbZh);
            btnGroup.addActionListener((e) -> {
                if (rbEn.isSelected()) {
                    this.lang = "en";
                } else if (rbZh.isSelected()) {
                    this.lang = "zh";
                }
                Storage.getInstance().writeObject("lang", this.lang);
                if (setupDone) {
                    refreshButtons();
//                    this.formView.resetTableList();
                    this.formView = new TableView(this);
                    this.formView.init();
                }
                this.formSetting = null;
                showSettings();
            });
            if (lang.equalsIgnoreCase("zh")) {
                rbZh.setSelected(true);
            } else {
                rbEn.setSelected(true);
            }

            CheckBox cbVibrate = new CheckBox(Dict.get(lang, "On"));
            cbVibrate.setSelected(this.vibrate);
            this.formSetting.add(tl.createConstraint().widthPercentage(30).horizontalAlign(Component.RIGHT),
                    new Label(Dict.get(lang, "Language"))).add(BoxLayout.encloseX(rbEn, rbZh));

            this.formSetting.add(tl.createConstraint().widthPercentage(30).horizontalAlign(Component.RIGHT),
                    new Label(Dict.get(lang, "Player Name"))).add(pName)
                    .add(tl.createConstraint().widthPercentage(30).horizontalAlign(Component.RIGHT),
                            new Label(Dict.get(lang, "Background"))).add(strPicker)
                    .add(tl.createConstraint().widthPercentage(30).horizontalAlign(Component.RIGHT),
                            new Label(Dict.get(lang, "Vibrate"))).add(cbVibrate);

            Toolbar tbar = this.formSetting.getToolbar();
            tbar.setUIID("myTool");
            if (setupDone) {
                tbar.setBackCommand("", (e) -> {
                    switchScene("entry");
                });
            }
            tbar.addMaterialCommandToRightBar(Dict.get(lang, "Save"), FontImage.MATERIAL_SAVE, (ev) -> {
                String playerName = savePlayerName(pName);
                if (playerName == null) {
                    Dialog.show(Dict.get(lang, "Error"), this.errMsg, Dict.get(lang, "OK"), "");
                    return;
                }
                saveBackground(strPicker);
                vibrate = cbVibrate.isSelected();
                Preferences.set("vibrate", this.vibrate);
                if (setupDone) {
                    switchScene("entry");
                } else {
                    setupDone = true;
                    Preferences.set("setup", true);
                    startMain();
                    if (registered) {
                        ServerMessage.showMessage(this, "guide");
                    }
                }
            });
        }

        this.formSetting.show();
    }

    private String getPlayerName() {
        Object sgObj = Storage.getInstance().readObject("playerName");
        return sgObj == null ? "" : sgObj.toString();
    }

    private String getPlayerID() {
        String playerId = null;
        try {
//        List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
// WifiManager wimanager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
//    String macAddress = wimanager.getConnectionInfo().getMacAddress();

            // skip this for now, may implement in future
//            String udid = disp.getUdid();
//            if (udid != null && !udid.trim().isEmpty()) {
//                return udid.trim();
//            }
//            String msisdn = disp.getMsisdn();
//            if (msisdn != null && !msisdn.trim().isEmpty()) {
//                return msisdn.trim();
//            }
            Storage storage = Storage.getInstance();
            Object pId = storage.readObject("playerId");
            if (pId == null || !pId.toString().startsWith("TLJ")) {
                pId = "TLJ" + Long.toString(System.currentTimeMillis(), 16);
                storage.writeObject("playerId", pId);
            }
            playerId = pId.toString();
        } catch (Exception e) {
            Dialog.show("Fail to get player ID", e.getMessage(), "OK", "");
        }
        return playerId;
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }

        if (current == this.formStart) {
            exitShow();
        } else if (current != this.formTable) {
            destroy();
        }
//        if (this.isMainForm || this.player == null || this.player.tableEnded || !this.player.tableOn) {
//            destroy();
//        }
    }

    public void destroy() {
        if (this.player != null) {
            player.disconnect();
        }
        Display.getInstance().exitApplication();
    }

    private String currentLang;
    private Map<String, Container> helpMap = new HashMap<>();

    private void showHelp(final String lang) {
        if (this.help == null) {
            this.help = new Container(new LayeredLayout());
            this.help.setSafeArea(true);
            this.formHelp = new Form(new BorderLayout());
            this.formHelp.setBackCommand("", null, (e) -> {
                this.switchScene("entry");
            });
//            this.formHelp.getStyle().setBgColor(BACKGROUND_COLOR);
            this.formHelp.getToolbar().hideToolbar();
            this.formHelp.addComponent(BorderLayout.CENTER, this.help);
        } else {
            if (lang.equals(currentLang)) {
                this.switchScene("help");
                return;
            }
            this.help.removeAll();
        }

        Container currentHelp = helpMap.get(lang);

        if (currentHelp == null) {
            switch (lang) {
                case "zh":
                    currentHelp = showHelpZH();
                    break;
                case "en":
                default:
                    currentHelp = showHelpEN();
            }

            helpMap.put(lang, currentHelp);
            currentLang = lang;
        }

        Button bReturn = new Button(Dict.get(lang, "Exit"));
        bReturn.setMaterialIcon(FontImage.MATERIAL_EXIT_TO_APP);
//        bReturn.setUIID("return");
        bReturn.addActionListener((e) -> {
            this.switchScene("entry");
        });

        this.help.add(currentHelp).add(bReturn);
        LayeredLayout ll = (LayeredLayout) help.getLayout();
        ll.setInsets(bReturn, "auto 0 0 auto");  //top right bottom left
        this.switchScene("help");
    }

    private Container showHelpZH() {
        Container content = new Container(BoxLayout.y());
        content.setScrollableY(true);
        content.setScrollableX(true);
        content.getAllStyles().setFgColor(0);

        SpanLabel lb = new SpanLabel("本游戏为六人四付找朋友打法，采用竞叫上庄，庄家叫主后拿底牌并扣底，\n然后找一个朋友（也可以不找，一个打五个，打成后升级翻倍）");
        content.add(lb);
        lb = new SpanLabel("如果被闲家抠底，则底牌分翻4倍（对子抠底则再乘以2,三张则再乘3, ...）");
        content.add(lb);
        lb = new SpanLabel("四张相同牌为炸弹，可以炸2对的拖拉机");
        content.add(lb);
        lb = new SpanLabel("拖拉机只能是连对，或者相连的三张/四张，对子和连接的三张不算拖拉机");
        content.add(lb);
        lb = new SpanLabel("甩牌失败扣分，每收回一张扣10分");
        content.add(lb);
        lb = new SpanLabel("当需要跟对子（或三张）时必须跟对，\n如果没有其它对子，但有三张（或四张）则必须拆了跟出");
        content.add(lb);
        return content;
    }

    private Container showHelpEN() {
        Container content = new Container(BoxLayout.y());
        content.setScrollableY(true);
        content.setScrollableX(false);

        SpanLabel lb = new SpanLabel("This game is played by six players,"
                + " using four full decks. Each player is dealt with 35 cards,"
                + " while the remaining 6 cards will be added to the declarer later."
                + " The bidding procedure is similar to Bridge game, each player can bid a specific point or pass."
                + " The declarer is the player who made the final point bid (contract point)."
                + " That means, after this point bid, other players all pass."
                + " Then the declarer choose which suit is trump, or NT means no-trump."
                + " After that, the remaining 6 cards is added to the declarer’s hand."
                + " The declarer then select any 6 cards to throw out, as the hole cards."
                + " At this point, the declarer can define the partner condition:"
                + " e.g. 2nd ♠A, it means who plays the second ♠A will be the declarer’s partner,"
                + " then all other 4 players will be the defenders."
                + " The defenders need collect enough points (equals or greater than the contract point) to beat the contract.");
        content.add(lb);
        Container p = new Container();
        content.add(p);
        p.add(boldText("Playing Stage:"));
        addLongText(p, "The declarer plays the first hand, then each player plays in a counter-clockwise order."
                + " The player who wins this round collects all the points (sum all the point cards played, if any),"
                + " and will be the next leading player, and so on."
                + " If a defender wins the final round and there are point cards in the hole cards,"
                + " the total points in the hole cards will be times by a multiple (4 or more, depends on the winning hand strength) and added the defenders’ collected points."
                + " If the contract is made, the declarer and partner is promoted to next rank,"
                + " otherwise the defenders are promoted to next rank.");

        content.add(theme.getImage("h2.png").scaledWidth(Display.getInstance().getDisplayWidth()));

        content.add(p = new Container());
        p.add(boldText("Point Cards:"));
        addLongText(p, "5 (5 points), 10 and K (10 points). 100 points per deck, total points is 400.");

        content.add(p = new Container());
        p.add(boldText("Card Rank"));
        addLongText(p, "(from low to high): 2, 3, 4 … 10, J, Q, K, A, game rank (not in trump suit), game rank (in trump suit), Black Joker, Red Joker.");

        content.add(p = new Container());
        p.add(boldText("Game Rank:"));
        addLongText(p, "The declarer’s current rank (In general, every player begins from Rank 2)");

        content.add(p = new Container());
        p.add(boldText("Trump:"));
        addLongText(p, "Red Joker, Black Joker and the game rank cards are always trumps (even in a NT game).");
        content.add(p = new Container());
        p.add(boldText("Flop Play:"));
        addLongText(p, "The leading player plays multiple combinations together. To make it a valid play, all the combinations must not be beaten by other players.");
        content.add(p = new Container());
        addLongText(p, "   e.g. the leading player try play ♥A♥K♥K, but another player has ♥A♥A, then the leading player is forced to play ♥K♥K (♥A will be returned to his/her hand), and get a 10 point penalty (each card returned get a 10 point penalty).");
        content.add(p = new Container());
        p.add(boldText("Ruff:"));
        addLongText(p, "A player can ruff by using his/her trump if the leading suit is empty in his/her hand.\n");
        content.add(p = new Container());
        p.add(boldText("Overruff:"));
        addLongText(p, "If the leading hand is a Flop, and two players can ruff, then only the strongest(longest) combination is compared to determine which is the winning hand.");
        content.add(p = new Container());
        addLongText(p, "    e.g. suppose ♥ is trump, game rank is 10");
        content.add(p = new Container());
        addLongText(p, "    a. the leading hand is ♠AQQJJ, one player ruffs with ♥A6655, then another player can overruff with ♥59988");
        content.add(p = new Container());
        addLongText(p, "    b. the leading hand is ♠AAJJ, one player ruffs with ♥JJ99, then another player can overruff with ♥QQ22");

        content.add(p = new Container());
        p.add(boldText("DaGuang:"));
        addLongText(p, "Defenders collected no point, declarer and partner is promoted by 3 ranks.");
        content.add(p = new Container());
        p.add(boldText("XiaoGuang:"));
        addLongText(p, "The total collected points are less than half of the contract point, declarer and partner is promoted by 2 ranks.");
        content.add(p = new Container());
        p.add(boldText("Bounce:"));
        addLongText(p, "The total collected points minus the contract point, for each additional 80 points, the defenders are promoted by 1 more rank.");
        content.add(p = new Container());
        p.add(boldText("1 vs 5:"));
        addLongText(p, "At the beginning of playing stage, the declarer can choose “1 vs 5” (no partner). If the contract is made, the declarer will get double promotion.");
        content.add(p = new Container());
        p.add(boldText("Match:"));
        addLongText(p, "The player whose rank passes Rank A wins the match. A full match (2 -> A) usually takes 3.5 to 4.5 hours.");

        content.add(p = new Container());
        p.add(boldText("Card Combinations\n"));
        content.add(p = new Container());
        p.add(boldText("Single:"));
        addLongText(p, "a single card");
        content.add(p = new Container());
        p.add(boldText("Pair:"));
        addLongText(p, "2 same cards");
        content.add(p = new Container());
        p.add(boldText("Tractor:"));
        addLongText(p, "connected pairs: e.g. 2233, 667788, 5577(while 6 is the game rank), ♠K♠K♠A♠A♥5♥5♠5♠5BBRR (while game rank is 5 and ♠ is trump, B is Black Joker, R is Red Joker)");
        content.add(p = new Container());
        p.add(boldText("Trips:"));
        addLongText(p, "3 same cards (if leaded, other player has to follow a pair if he has no trips to play)");
        content.add(p = new Container());
        p.add(boldText("Quads:"));
        addLongText(p, "4 same cards (bomb, can beat 2-pair tractor; if leaded, the follow play preference is: quads, trips + single, 2-pair tractor, 2 pairs, 1 pair + 2 singles, 4 singles)");
        content.add(p = new Container());
        p.add(boldText("Bulldozer:"));
        addLongText(p, "connected trips (or quads): e.g. 444555, JJJQQQKKK (if leaded, the follow play preference is (for 2-trips bulldozer): 2 trips, 1 trips + 1 pair + 1 single, 2-pair tractor + 2 singles, 2 pairs + 2 singles, 1 pair + 4 singles, 6 singles)");

        return content;
    }

    public static Label boldText(String txt) {
        Label boldLabel = new Label(txt);
        boldLabel.getAllStyles().setFont(Hand.fontGeneral);
        boldLabel.getAllStyles().setFgColor(0);
        return boldLabel;
    }

    private void addLongText(Container p, String txt) {
        while (txt.length() > 0) {
            int idx = txt.indexOf(" ");
            if (idx < 0) {
                p.add(new Label(txt));
                return;
            }
            p.add(new Label(txt.substring(0, idx)));
            txt = txt.substring(idx + 1);
        }
    }

    public boolean isLandscape() {
        int w = Display.getInstance().getDisplayWidth();
        int h = Display.getInstance().getDisplayHeight();
        if (w > h) {
            return true;
        }

        if (lang.equals("zh")) {
            Dialog.show("横屏", "请置于横屏模式", Dict.get(lang, "OK"), null);
        } else {
            Dialog.show("Landscape", "Please rotate to landscape", Dict.get(lang, "OK"), null);
        }
        return false;
    }

    private void showAppleLogin(AppleLogin login) {
        Form frm = new Form(Dict.get(lang, title), BoxLayout.yLast());
        frm.setSafeArea(true);
        frm.add(FlowLayout.encloseCenter(new Label(AppleLogin.createAppleLogo(0x0, 15f))));
        Button loginBtn = new Button(Dict.get(lang, Dict.SIGNIN_APPLE));
        AppleLogin.decorateLoginButton(loginBtn, 0x0, 0xffffff);
        Button regBtn = new Button(Dict.get(lang, Dict.SIGNIN_EMAIL));

//        login.addScopes("fullName", "email");
        loginBtn.addActionListener(evt -> {
            ToastBar.showInfoMessage(Dict.get(lang, Dict.PLEASE_WAIT));
            if (BYPASS_LOGIN) {
                startMain();
                return;
            }

            if (!login.isNativeLoginSupported()) {
                ToastBar.showErrorMessage(Dict.get(lang, Dict.UPGRADE_IOS));
                if (DEBUG && INTERNAL) {
                    new UITimer(new Runnable() {
                        @Override
                        public void run() {
                            showStorage();
                        }
                    }).schedule(5000, false, frm);
                }
                return;
            }

            login.doLogin(new LoginCallback() {
                @Override
                public void loginFailed(String errorMessage) {
                    ToastBar.showErrorMessage(errorMessage);
                    if (DEBUG && INTERNAL) {
                        new UITimer(new Runnable() {
                            @Override
                            public void run() {
                                showStorage();
                            }
                        }).schedule(5000, false, frm);
                    }
                }

                @Override
                public void loginSuccessful() {
                    loginBtn.setEnabled(false);
                    regBtn.setEnabled(false);
                    Preferences.set("UserID", login.getUserId());
                    Preferences.set("Email", login.getEmail());
                    Preferences.set("Name", login.getFullName());
                    Preferences.set("KeyID", login.getKeyId());
                    startMain();
                }
            });
        });

//        AppleLogin.decorateLoginButton(regBtn, 0x0, 0xffffff);
        regBtn.addActionListener(evt -> {
            startMain();
        });

        frm.add(FlowLayout.encloseCenter(loginBtn));
        frm.add(FlowLayout.encloseCenter(regBtn));

        frm.add(skipButton());
        Button btnPrivacy = new Button(Dict.get(lang, "Privacy Policy"));
        btnPrivacy.addActionListener(ev -> {
            showPrivacy(null);
            btnPrivacy.setEnabled(false);
            new UITimer(new Runnable() {
                @Override
                public void run() {
                    btnPrivacy.setEnabled(true);
                }
            }).schedule(5000, false, frm);
        });
        frm.add(btnPrivacy);

        if (INTERNAL) {
            frm.getToolbar().addMaterialCommandToRightBar("Storage", FontImage.MATERIAL_ECO, (ev) -> {
                showStorage();
            });
        }
        frm.show();
    }

    public void startRegistration() {
        String email = Preferences.get("Email", "");
        Form frm;
        TextField tf = new TextField(email, Dict.get(lang, Dict.INPUT_EMAIL));
        Button btnOk = new Button(Dict.get(lang, "OK"));
        btnOk.addActionListener(ev -> {
            String s = tf.getText().trim();
            if (s.isEmpty()) return;
            if (!Dict.validEmail(s)) {
                Dialog.show(Dict.get(lang, Dict.INVALID_EMAIL), null, Dict.get(lang, "OK"), null);
                return;
            }
            btnOk.setEnabled(false);
            Preferences.set("Email", s);
            player.sendRequest(player.initRequest(Request.REGISTER)
                    .append("email", s)
                    .setReSend(true));
        });

        if (email.isEmpty()) {
            frm = new Form(Dict.get(lang, Dict.REGISTER), BoxLayout.yLast());
            frm.add(Dict.get(lang, Dict.CORRECT_EMAIL));
            frm.add(tf).add(btnOk);
        } else {
            frm = new Form(Dict.get(lang, Dict.AUTH), BoxLayout.yLast());
            frm.add(Dict.get(lang, Dict.VERIFY_INSTRUCTION));
            frm.add(tf);
            TextField tAuthcode = new TextField("", Dict.get(lang, Dict.AUTH_CODE), 10, TextArea.NUMERIC);
            Button btnVerify = new Button(Dict.get(lang, "Submit"));
            btnVerify.addActionListener(ev -> {
                String code = tAuthcode.getText().trim();
                if (code.isEmpty()) return;
                btnVerify.setEnabled(false);
                player.sendRequest(player.initRequest(Request.VERIFY)
                        .append("code", code)
                        .setReSend(true));
                new UITimer(new Runnable() {
                    @Override
                    public void run() {
                        btnVerify.setEnabled(true);
                    }
                }).schedule(5000, false, frm);
            });
            frm.add(tAuthcode).add(btnVerify);
            btnOk.setText(Dict.get(lang, Dict.RESEND));
//            frm.add(BoxLayout.encloseXCenter(new Label(Dict.get(lang, Dict.MISSING_AUTHCODE)), btnOk));
            frm.add(Dict.get(lang, Dict.MISSING_AUTHCODE)).add(btnOk);
        }

        frm.add(skipButton());
        Button btnPrivacy = new Button(Dict.get(lang, "Privacy Policy"));
        btnPrivacy.addActionListener(ev -> {
            showPrivacy(null);
            btnPrivacy.setEnabled(false);
            new UITimer(new Runnable() {
                @Override
                public void run() {
                    btnPrivacy.setEnabled(true);
                }
            }).schedule(5000, false, frm);
        });
        frm.add(btnPrivacy);
        frm.setSafeArea(true);
        if (INTERNAL) {
            frm.getToolbar().addMaterialCommandToRightBar("Storage", FontImage.MATERIAL_ECO, (ev) -> {
                showStorage();
            });
        }
        frm.show();
    }

    private boolean skipRegistration = false;

    private Button skipButton() {
        Button btnSkip = new Button(Dict.get(lang, "Skip"));
        btnSkip.addActionListener(ev -> {
            skipRegistration = true;
            startMain();
        });
        return btnSkip;
    }

    private String strPrivacy;

    public void showPrivacy(String msg) {
        if (msg != null) {
            this.strPrivacy = msg;
        }
        if (strPrivacy != null) {
            Dialog.show(Dict.get(lang, "Privacy Policy"), strPrivacy, Dict.get(lang, "OK"), null);
        } else {
            player.sendRequest(player.initRequest("priv"));
        }
    }

    private void showGoogleLogin() {
        Form frm = new Form(BoxLayout.y());

//        frm.add(FlowLayout.encloseCenter(new Label(login.));
        Button loginBtn = new Button(Dict.get(lang, Dict.SIGNIN_GOOGLE));

//        login.addScopes("fullName", "email");
        loginBtn.addActionListener(evt -> {
            ToastBar.showInfoMessage(Dict.get(lang, Dict.PLEASE_WAIT));

            if (BYPASS_LOGIN) {
                startMain();
                return;
            }

            MyGoogleLogin lg = MyGoogleLogin.getInstance();
            lg.init();

            GoogleData uData = new GoogleData();
            lg.setCallback(new LoginCallback() {
                @Override
                public void loginFailed(String errorMessage) {
//                    System.out.println("Login failed: " + errorMessage);
                    ToastBar.showErrorMessage("FAIL: " + errorMessage, 5000);
                    showStorage();
                }

                @Override
                public void loginSuccessful() {
                    uData.fetchData(lg.getAccessToken().getToken(), () -> {
                        Preferences.set("fullName", uData.getName());
                        Preferences.set("uniqueId", uData.getId());
//                        Preferences.set("email", uData.getEmail());
                        startMain();
                    });
//                    ToastBar.showMessage(lg.getAccessToken().getToken(), FontImage.MATERIAL_DONE);
//                    String plName = Player.trimmedString(login.getAccessToken());
//                    Storage.getInstance().writeObject("playerName", plName);
//                    myName = plName;
//                    startMain();
                }
            });

            if (lg.isUserLoggedIn()) {
                ToastBar.showInfoMessage("Loggin already");
                startMain();
            } else {
                lg.doLogin();
            }
        });

        Button loginBtn1 = new Button(Dict.get(lang, Dict.SIGNIN_GOOGLE) + " Org");
        loginBtn1.addActionListener(evt -> {
            ToastBar.showInfoMessage(Dict.get(lang, Dict.PLEASE_WAIT));

            if (BYPASS_LOGIN) {
                startMain();
                return;
            }

            GoogleConnect lg = GoogleConnect.getInstance();
            lg.setClientId(Card.GOOGLE_CLIENT_ID);
            lg.setClientSecret(Card.GOOGLE_CLIENT_SECRET);
//            gc.setRedirectURI("https://www.codenameone.com/oauth2callback");
//            lg.setRedirectURI(DEBUG ? "http://localhost" : "urn:ietf:wg:oauth:2.0:oob");
            lg.setRedirectURI("http://localhost");
            GoogleData uData = new GoogleData();
            lg.setCallback(new LoginCallback() {
                @Override
                public void loginFailed(String errorMessage) {
//                    System.out.println("Login failed: " + errorMessage);
                    ToastBar.showErrorMessage("FAIL: " + errorMessage, 5000);
                    showStorage();
                }

                @Override
                public void loginSuccessful() {
                    uData.fetchData(lg.getAccessToken().getToken(), () -> {
                        Preferences.set("fullName", uData.getName());
                        Preferences.set("uniqueId", uData.getId());
//                        Preferences.set("email", uData.getEmail());
                        startMain();
                    });
                }
            });

            if (lg.isUserLoggedIn()) {
                ToastBar.showInfoMessage("Loggin already");
                startMain();
            } else {
                lg.doLogin();
            }
        });

        if (INTERNAL) frm.add(FlowLayout.encloseCenter(loginBtn));
        frm.add(FlowLayout.encloseCenter(loginBtn1));
        frm.show();
    }

    private void showStorage() {
        Form frm = new Form("Storage", BoxLayout.y());
        frm.setSafeArea(true);
        frm.setScrollableX(true);
        frm.setScrollableY(true);
        Storage sr = Storage.getInstance();
        for (String k : sr.listEntries()) {
            if (k == null || k.isEmpty()) continue;
            String v = Func.trimmedString(sr.readObject(k));
            frm.add(BoxLayout.encloseX(new Label(k), new Label(v.isEmpty() ? "Null" : v),
                    new Button(Command.createMaterial("", FontImage.MATERIAL_DELETE, (ev) -> {
                        sr.writeObject(k, null);
                    }))
            ));

        }

        frm.getToolbar().addMaterialCommandToLeftBar("Clear All", FontImage.MATERIAL_DELETE, (e) -> {
            sr.clearStorage();
            if (formMain == null) {
                startMain();
            } else {
                formMain.showBack();
            }
        });

        frm.getToolbar().addMaterialCommandToRightBar("Start", FontImage.MATERIAL_STAR, (e) -> {
            if (formMain == null) {
                startMain();
            } else {
                formMain.showBack();
            }
        });
        frm.show();
    }

    void recommendFriend(String title) {
        Form frm = new Form(Dict.get(lang, Dict.PROMOTION_NOTE), BorderLayout.center());
        frm.setSafeArea(true);
        Container props = new Container(new TableLayout(7, 1));
        props.setScrollableY(true);
        int total = 5;
        for (int x = 0; x < total; x++) {
            props.add(new TextField("", Dict.get(lang, Dict.FRIEND_EMAIL)));
        }
        props.add(new TextField("", Dict.get(lang, Dict.YOUR_NAME)));

        frm.add(BorderLayout.CENTER, props);
        frm.add(BorderLayout.SOUTH, Dict.get(lang, Dict.NAME_NOTE));

        Toolbar tbar = frm.getToolbar();
        tbar.setUIID("myTool");
        tbar.addMaterialCommandToRightBar(Dict.get(lang, "Submit"), FontImage.MATERIAL_DONE_OUTLINE, ev -> {
            String emails = "";
            for (int x = 0; x < total; x++) {
                String s = ((TextField) props.getComponentAt(x)).getText().trim();
                if (s.isEmpty()) continue;
                if (!Dict.validEmail(s)) {
                    Dialog.show(Dict.get(lang, Dict.INVALID_EMAIL), s, Dict.get(lang, "OK"), null);
                    return;
                }
                emails += "," + s;
            }
            if (emails.isEmpty()) return;
            String nm = ((TextField) props.getComponentAt(total)).getText().trim();
            if (nm.isEmpty()) {
                Dialog.show(Dict.get(lang, Dict.INPUT_NAME), null, Dict.get(lang, "OK"), null);
                return;
            }
            nm = StringUtil.replaceAll(nm, "\"", "");
            nm = StringUtil.replaceAll(nm, "\\", "");
            nm = StringUtil.replaceAll(nm, "'", "");
            nm = StringUtil.replaceAll(nm, ":", " ");
            if (nm.trim().isEmpty()) {
                Dialog.show(Dict.get(lang, Dict.INVALID_NAME), null, Dict.get(lang, "OK"), null);
                return;
            }
            player.sendRequest(Request.create(Request.RECOMMEND, "emails", emails.substring(1))
                    .append("myname", nm).append("lang", lang));
            formMain.showBack();
        });
        tbar.setBackCommand("", (e) -> {
            switchScene("entry");
        });
        frm.show();
    }

    class ButtonText {
        char icon;
        String type;
        Map<String, String> textMap = new HashMap<>();
        private Button btn;

        ButtonText(String type, String enTxt, String zhTxt, char icon) {
            this.type = type;
            this.icon = icon;
            textMap.put("zh", zhTxt);
            textMap.put("en", enTxt);
        }

        Button getButton(TuoLaJiPro main) {
            if (btn == null) {
                btn = new Button(textMap.get(lang));
                btn.getStyle().setFgColor(Player.BUTTON_COLOR);
                btn.setMaterialIcon(icon);
                switch (type) {
                    case "guide":
                    case "account":
                    case "rank":
                        btn.addActionListener(evt -> {
                            btn.setEnabled(false);
                            ServerMessage.showMessage(main, type);
                            new UITimer(new Runnable() {
                                @Override
                                public void run() {
                                    btn.setEnabled(true);
                                }
                            }).schedule(5000, false, formMain);
                        });
                        break;
                    case "recommend":
                        btn.addActionListener(evt -> {
                            if (registered) {
                                recommendFriend(textMap.get(lang));
                            } else {
                                infoRegisterRequired();
                            }
                        });
                        break;
                    case "tour":
                        btn.addActionListener(evt -> {
                            switchScene("tour");
                        });
                        break;
                }
            }
            btn.setText(textMap.get(lang));
            return btn;
        }

        void refresh() {
            if (btn != null) btn.setText(textMap.get(lang));
        }
    }

    static class CustomColor {

        int backColor;
        int generalColor = Player.BLACK_COLOR;
        int pointColor = Player.POINT_COLOR;
        String nameZh;
        String nameEn;

        CustomColor(String nmEn, String nmZh, int bkColor) {
            this.backColor = bkColor;
            this.nameEn = nmEn;
            this.nameZh = nmZh;

            if (nmEn.contains("Dark")) {
                this.generalColor = 0xb1c4bb;
                this.pointColor = Player.INFO_COLOR;
            }
        }

        public String getName(final String lang) {
            switch (lang) {
                case "zh":
                    return nameZh;
            }

            return nameEn;
        }
    }
}
